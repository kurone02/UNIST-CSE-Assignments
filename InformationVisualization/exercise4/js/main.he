Promise.all([
    d3.csv('./data/fertility_rate.csv'),
    d3.csv('./data/life_expectancy.csv'),
    d3.csv('./data/population.csv'),
]).then((files) => {
    let [fertility_rate, life_expectancy, population] = files;

    let combinedData = combineData(fertility_rate, life_expectancy, population);

    let fertility_rate_extent = getMinMax(fertility_rate);
    let life_expectancy_extent = getMinMax(life_expectancy);
    let population_extent = getMinMax(population);

    drawChart(combinedData, fertility_rate_extent, life_expectancy_extent, population_extent);

}).catch((err) => {
    console.log("Error when loading the data");
    console.log(err);
});



function drawChart(data, fertility_rate_extent, life_expectancy_extent, population_extent) {

    const margin = {top: 5, right: 100, bottom: 50, left: 100};
    let width = document.getElementById("graph_area").offsetWidth - margin.left - margin.right;
    let height = 600 - margin.top - margin.bottom;

    // Create SVG element
    const svg = d3.select("#chart")
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", `translate(${margin.left},${margin.top})`);

    document.getElementById("year_picker").style.width = `${width}px`;

    // Add the slider
    vm = {
        sliderValues: d3.range(1960, 2022),
        rawSliderValue: ko.observable(62),
        sliderValue: ko.pureComputed(function() {
            updateChart(data[vm.rawSliderValue() - 1], fertility_rate_extent, life_expectancy_extent, population_extent);
            return `Year: ${vm.sliderValues[vm.rawSliderValue() - 1]}`;
        })
    };
    
    ko.applyBindings(vm);
    

}



function updateChart(data, fertility_rate_extent, life_expectancy_extent, population_extent) {
    const margin = {top: 5, right: 100, bottom: 50, left: 50};
    let width = document.getElementById("graph_area").offsetWidth - margin.left - margin.right;
    let height = 600 - margin.top - margin.bottom;

    let svg = d3.select("#chart")
                  .select("svg");
    svg.selectAll("*").remove();
    svg = svg.append("g")
       .attr("transform", `translate(${margin.left},${margin.top})`);
    d3.select("#chart").selectAll("div").remove();

    // Add X axis
    const xScale = d3.scaleLinear()
                .domain(life_expectancy_extent)
                .range([0, width]);
    
    // Draw X axis
    svg.append("g")
       .attr("transform", `translate(0, ${height})`)
       .call(d3.axisBottom(xScale));

    // Add Y axis
    const yScale = d3.scaleLinear()
                     .domain(fertility_rate_extent)
                     .range([height, 0]);

    // Draw Y axis
    svg.append("g")
       .call(d3.axisLeft(yScale));

    // Add bubble scale
    const bubbleScale = d3.scaleLinear()
                          .domain(population_extent)
                          .range([5, 40]);

    // Add tooltip
    let tooltip = d3.select("#chart")
                    .append("div")
                    .style("opacity", 0)
                    .attr("class", "tooltip")
                    .style("background-color", "black")
                    .style("border-radius", "5px")
                    .style("padding", "10px")
                    .style("color", "white");

    // Function to show the tooltip
    const showTooltip = (e, d) => {
        tooltip.transition()
               .duration(100);
        tooltip.style("opacity", 1)
               .html("Country: " + d["country"] + '<br>' +
                     "Fertility rate: " + d["fertility_rate"] + '<br>' +
                     "Life expectancy: " + d["life_expectency"])
               .style("left", (e.x + 20) + "px")
               .style("top", (e.y) + "px")
    };

    // Function to update the the tooltip's poistion
    const moveTooltip = (e, d) => {
        tooltip.style("left", (e.x + 20) + "px")
               .style("top", (e.y) + "px")
    };

    // Function to hide the the tooltip
    const hideTooltip = (e, d) => {
        tooltip.transition()
               .duration(200)
               .style("opacity", 0)
    };

    data.sort((x, y) => d3.descending(x.population, y.population));

    // Draw bubbles
    svg.append("g")
        .selectAll("dot")
        .data(data)
        .join("circle")
        .attr("cx", d => xScale(d["life_expectency"]))
        .attr("cy", d => yScale(d["fertility_rate"]))
        .attr("r", d => bubbleScale(d["population"]))
        .style("fill", "#69b3a2")
        .style("opacity", "0.7")
        .attr("stroke", "black")
        .on("mouseover", showTooltip)
        .on("mousemove", moveTooltip)
        .on("mouseleave", hideTooltip);

    // Indicate the x-axis label 
    svg.append("text")
    .attr("text-anchor", "end")
    .attr("x", width / 2 + margin.left)
    .attr("y", height + 40)
    .attr("font-family", "sans-serif")
    .attr("font-size", 18)
    .text("Life Expectancy");

    // Indicate the y-axis label 
    svg.append("text")
    .attr("text-anchor", "end")
    .attr("x", -height / 2)
    .attr("y", -margin.left / 2)
    .attr('transform', 'rotate(-90)')
    .attr("font-family", "sans-serif")
    .attr("font-size", 18)
    .text("Fertility Rate (%)");

}